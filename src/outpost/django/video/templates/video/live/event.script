#!/bin/python3
# vim: ai:ts=4:sw=4:ft=python

import asyncio
import json
import os
import shutil
import signal
import sys
from pathlib import Path
from urllib.parse import urlparse
from simpleeval import simple_eval

GPU = "{{ properties.gpuid }}"
SEGMENT = "2"
PREVIEW = "10"
# RUNTIME = Path(os.environ.get("RUNTIME_DIRECTORY"))
BASE = Path("/var/www/vhosts/asd.medunigraz.at/livestreams/{{ event.pk }}/")
FFMPEG = shutil.which("ffmpeg")
FFPROBE = shutil.which("ffprobe")
SSH = shutil.which("ssh")
STREAMS = [
{% for s in event.livestream_set.all %}
    {
        "name": "{{ s.pk }}",
        "source": "{{ s.source }}",
        "list_size": "{{ s.list_size }}",
        "delete_threshold": "{{ s.delete_threshold }}",
        "variants": {
{% for v in s.variants.all %}
            "{{ forloop.counter0 }}": {
                "height": "{{ v.height }}",
                "preset": "{{ v.preset }}",
                "profile": "{{ v.profile }}",
                "video": "{{ v.video }}",
                "audio": "{{ v.audio }}",
            },
{% endfor %}
        },
    },
{% endfor %}
]

PROTOCOL_OPTIONS = {
    "rtsp": [
        "-rtsp_transport", "tcp",
    ],
}


HTACCESS = """
AddType image/webp .webp
<FilesMatch "\.(m3u8|ts)$">
    Header set Cache-Control "max-age={SEGMENT},public" "expr=%{% templatetag openvariable %}REQUEST_STATUS{% templatetag closevariable %} == 200"
    Header always set Cache-Control "max-age=0, no-cache, no-store, must-revalidate" "expr=%{% templatetag openvariable %}REQUEST_STATUS{% templatetag closevariable %} == 404"
</FilesMatch>
<FilesMatch "\.jpg$">
    Header set Cache-Control "max-age={PREVIEW},public" "expr=%{% templatetag openvariable %}REQUEST_STATUS{% templatetag closevariable %} == 200"
    Header always set Cache-Control "max-age=0, no-cache, no-store, must-revalidate" "expr=%{% templatetag openvariable %}REQUEST_STATUS{% templatetag closevariable %} == 404"
</FilesMatch>
RewriteEngine on
RewriteCond %{{HTTP_ACCEPT}} image/webp
RewriteCond %{{REQUEST_FILENAME}}.webp -f
RewriteRule \.(png|jpg|jpeg)$ %{{REQUEST_URI}}.webp [L]
"""


async def inspect(stream):
    proc = await asyncio.create_subprocess_exec(
        FFPROBE,
        "-hide_banner",
        "-loglevel", "fatal",
        "-print_format", "json",
        "-show_error",
        "-show_format",
        "-show_streams",
        "-analyzeduration", "256k",
        "-probesize", "512k",
        stream.get("source"),
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
        cwd=str(BASE),
    )
    stdout, stderr = await proc.communicate()
    if proc.returncode != 0:
        raise Exception(
            "Field to inspect stream {source}: {stderr}".format(
                source=stream.get("source"), stderr=stderr
            )
        )
    stream["metadata"] = json.loads(stdout)
    return stream


async def transcode(stream):
    name = stream.get("name")
    variants = stream.get("variants")
    protocol = urlparse(stream.get("source")).scheme
    options = PROTOCOL_OPTIONS.get(protocol, list())
    has_audio = any(
        filter(
            lambda s: s.get("codec_type") == "audio",
            stream.get("metadata").get("streams"),
        )
    )
    filters = [
        "[0:v]split={copies}{maps}[p]".format(
            copies=str(len(variants)) + 1,
            maps="".join([f"[v_{v}]" for v in variants.keys()]),
        )
    ]
    maps = []
    embeds = []
    for v, vdata in variants.items():
        height = vdata.get("height")
        filters.append(f"[v_{v}]scale=-1:{height}[v_{v}_scaled]")
        maps.extend([
            "-map", f"[v_{v}_scaled]",
            f"-r:v:{v}", "30",
            f"-c:v:{v}", "h264_nvenc",
            "-gpu", GPU,
            f"-b:v:{v}", vdata.get("video"),
            f"-maxrate:v:{v}", vdata.get("video"),
            f"-minrate:v:{v}", vdata.get("video"),
            f"-bufsize:v:{v}", vdata.get("video"),
            f"-preset:v:{v}", vdata.get("preset"),
            f"-profile:v:{v}", vdata.get("profile"),
            f"-g:v:{v}", "60",
            f"-sc_threshold:v:{v}", "0",
            f"-keyint_min:v:{v}", "60",
            f"-rc-lookahead:v:{v}", "0",
        ])
        if has_audio:
            embeds.append(f"v:{v},a:{v}")
        else:
            embeds.append(f"v:{v}")

    fps = max(
        [
            int(simple_eval(s.get("r_frame_rate", "30")))
            for s in stream.get("metadata").get("streams")
            if s.get("codec_type") == "video"
        ]
    )
    filters.append(
        "[p]select=not(mod(n\,{frames})),split=2[p_jpeg][p_webp]".format(
            frames=fps * PREVIEW
        )
    )

    if has_audio:
        for v, vdata in variants.items():
            maps.extend([
                "-map", "0:a",
                f"-c:a:{v}", "aac",
                f"-b:a:{v}", vdata.get("audio"),
            ])

    return await asyncio.create_subprocess_exec(
        FFMPEG,
        "-y",
        "-hide_banner",
        "-loglevel", "warning",
        "-fflags", "nobuffer",
        "-flags", "low_delay",
        "-strict", "experimental",
        *options,
        "-c:v", "h264_cuvid",
        "-i", stream.get("source"),
        "-filter_complex", ";".join(filters),
        "-map", "[p_jpeg]",
        "-vcodec", "mjpeg",
        "-f", "image2",
        "-update", "1",
        f"{name}.jpg",
        "-map", "[p_webp]",
        "-vcodec", "libwebp",
        "-f", "image2",
        "-update", "1",
        f"{name}.jpg.webp",
        *maps,
        "-f", "hls",
        "-hls_time", SEGMENT,
        "-hls_flags", "independent_segments+delete_segments",
        "-hls_segment_type", "mpegts",
        "-hls_segment_filename", f"{name}_%v_%05d.ts",
        "-hls_list_size", stream.get("list_size"),
        "-hls_delete_threshold", stream.get("delete_threshold"),
        "-master_pl_name", f"{name}.m3u8",
        "-var_stream_map", " ".join(embeds),
        f"{name}_%v.m3u8",
        stdout=sys.stdout,
        stderr=sys.stderr,
        cwd=str(BASE),
    )


async def tunnel_loop(stream):
    try:
        while True:
            proc = await asyncio.create_subprocess_exec(
                SSH,
                "-i", "/tmp/bla",
                "-R", "/tmp/remote.socket.transcode:/tmp/local/transcode",
                "-R", "/tmp/remote.socket.preview:/tmp/local/preview",
                "-N",
                "-a",
                "-q",
                "-o", "ServerAliveInterval=10",
                "-o", "IdentitiesOnly=yes",
                "-l", "username",
                "sj074.medunigraz.at"
            )
            await proc.wait()
    except asyncio.CancelledError:
        if proc:
            if not proc.returncode:
                proc.terminate()
        raise


async def tunnel(stream):
    return asyncio.create_task(tunnel_loop(args))


async def manager(stop):
    BASE.mkdir(parents=True, exist_ok=True)
    with BASE.joinpath(".htaccess").open("w") as htaccess:
        htaccess.write(HTACCESS.format(SEGMENT=SEGMENT, PREVIEW=PREVIEW))

    streams = await asyncio.gather(*[inspect(s) for s in STREAMS])
    procs = await asyncio.gather(*[asyncio.gather(transcode(s)) for s in streams])
    await stop
    for t in procs:
        t.terminate()
    for t in procs:
        try:
            await asyncio.wait_for(t.wait(), timeout=5)
        except asyncio.TimeoutError:
            if not t.returncode:
                t.kill()
    shutil.rmtree(BASE)


loop = asyncio.get_event_loop()

stop = loop.create_future()
loop.add_signal_handler(signal.SIGINT, stop.set_result, None)
loop.add_signal_handler(signal.SIGTERM, stop.set_result, None)

loop.run_until_complete(manager(stop))
